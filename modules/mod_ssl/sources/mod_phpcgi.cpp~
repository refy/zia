#include	<iostream>
#include	"AModule.hpp"
#include	"mod_phpcgi.hpp"
#include	"eTypeModule.hpp"
#include	<sstream>
#include <unistd.h>

mod_phpcgi::mod_phpcgi(apimeal::ILogger *log)
: AModule(log), _version(0, 1), _name("mod_phpcgi")
{}

mod_phpcgi::~mod_phpcgi()
{}

std::map<apimeal::eTypeModule, apimeal::ePriority>	mod_phpcgi::getPriority() const
{
    std::map<apimeal::eTypeModule, apimeal::ePriority>	ret;
    
    ret[apimeal::CGIMODULE] = 0.1f;
    ret[apimeal::POSTCONNEXION] = 1.0f;
    return (ret);
}

const apimeal::Version &		mod_phpcgi::getVersion() const
{
    return (this->_version);
}

const std::string &			mod_phpcgi::getName() const
{
    return (this->_name);
}

char**                          mod_phpcgi::createEnv(apimeal::IHttpRequest* req) const
{
    std::map<std::string, std::string>      env;
    char                                    port[42];
    sprintf(port, "%d", this->port);
    
    env["SERVER_SOFTWARE"] = "ziahttpd";
    env["SERVER_NAME"] = "zia";
    env["HTTP_HOST"] = req->getHeaders().at("Host");
    env["GATEWAY_INTERFACE"] = "CGI/1.1";
    env["SERVER_PROTOCOL"] = "HTTP/1.1";
    env["SERVER_PORT"] = port;
    env["REQUEST_METHOD"] = req->getMethod();
    //env["PATH_INFO"] = req->getUri();
    env["PATH_TRANSLATED"] = req->getRequestURI();
    env["SCRIPT_FILENAME"] = req->getRequestURI();
    env["SCRIPT_NAME"] = req->getHeaders().at("RealURI");
    env["QUERY_STRING"] = req->getBody();
    env["REMOTE_HOST"] = "REMOTE_ADDR";
    env["REMOTE_ADDR"] = this->clientIp;
    env["CONTENT_TYPE"] = "HTTP";
    if (req->getHeaders().find("Content-Length") != req->getHeaders().end())
        env["CONTENT_LENGTH"] = req->getHeaders().at("Content-Length");
    else
        env["CONTENT_LENGTH"] = "0";
    if (req->getHeaders().find("Content-Type") != req->getHeaders().end())
        env["CONTENT_TYPE"] = req->getHeaders().at("Content-Type");
    
    char** newEnv = new char*[env.size() + 1];
    std::map<std::string, std::string>::const_iterator      it = env.begin();
    std::map<std::string, std::string>::const_iterator      ite = env.end();
    
    int     i;
    for (i = 0; it != ite; ++it, ++i)
        newEnv[i] = strdup(std::string(it->first + "=" + it->second).c_str());
    newEnv[i] = NULL;
    return newEnv;
}

void mod_phpcgi::preConnexion (apimeal::IConnexion *, apimeal::Error &){}

void mod_phpcgi::postConnexion (apimeal::IConnexion *con, apimeal::Error &e)
{
    this->clientIp = con->getIp();
    this->port = con->getPort();
}

void mod_phpcgi::preParseRequest(apimeal::IHttpRequest *, apimeal::Error &){}

void mod_phpcgi::postParseRequest (apimeal::IHttpRequest *, apimeal::Error &){}

void mod_phpcgi::contentModule (apimeal::IHttpRequest *req, apimeal::Error &e)
{
    this->cgiContent = req->getBody();
    this->env = this->createEnv(req);
}

void mod_phpcgi::error(apimeal::IHttpResponse *resp)
{
    resp->setReasonPhrase("Internal server error");
    resp->setStatusCode(500);
}

void mod_phpcgi::CGIModule (apimeal::IHttpResponse *resp, apimeal::Error &e)
{
    
    pid_t pid;
    int pipe_fds[2];
    size_t length;
    char *buff;
    
//    ResponseHeader & responseHeader = response.getHeader();
//    Body & body = response.getBody();
    
    pipe(pipe_fds);
    
    pid = fork();
    if (pid == -1) {
        return error(resp);
        close(pipe_fds[0]);
        close(pipe_fds[1]);
    }
    
    if (pid == 0) {
        std::string bin("/usr/bin/php-cgi");
        const char *argv[] = {
            bin.c_str(),
            NULL
        };
        
        close(pipe_fds[0]);
        dup2(pipe_fds[1], 1);
        exit(execve(bin.c_str(), const_cast<char * const*> (argv), const_cast<char * const*> (env)));
    } else {
        
        int child_rt;
        close(pipe_fds[1]);
        
        waitpid(pid, &child_rt, 0);
        if (child_rt != 0) {
            close(pipe_fds[0]);
            return error(resp);
        }
        
        char buff[128];
        std::string bdy;
        int size;
        size = read(pipe_fds[0], buff, 128);
        while (size != -1 && size) {
            bdy.append(buff, size);
            size = read(pipe_fds[0], buff, 128);
        }
        if (size == -1) {
            close(pipe_fds[0]);
            return error(resp);
        }
        
        std::string header;
        std::string phpBody;
        
        size_t pos, last_pos;
        
        pos = bdy.find("\r\n" "\r\n");
        
        header = bdy.substr(0, pos);
        if (pos != std::string::npos) {
            phpBody = bdy.substr(pos + 4);
            
            char *tmp;
            size = phpBody.size();
            
            tmp = new char[size];
            phpBody.copy(tmp, size);
            resp->setBody(tmp);
        }
        
        last_pos = pos = 0;
        size_t line_pos;
        
        do{
            pos = header.find("\r\n", last_pos);
            std::string line = header.substr(last_pos, pos - last_pos);
            
            line_pos = line.find(": ");
            std::string key(line.substr(0, line_pos));
            std::string value(line.substr(line_pos + 2));
            
            if (key == "Status") {
                size_t pos;
                
                pos = value.find_first_of(' ');
                resp->setStatusCode(atoi(value.substr(0, pos).c_str()));
                resp->setReasonPhrase(value.substr(pos + 1));
            } else {
                resp->addHeader(key, value);
            }
            
            last_pos = pos + 2;
        } while (std::string::npos != pos);
        
//        responseHeader.setVersion(request.getHeader().getVersion());
//        
//        response.assemble();
        close(pipe_fds[0]);
    }
}



void mod_phpcgi::postGenerateResponse (apimeal::IHttpResponse *resp, apimeal::Error &)
{
    std::ostringstream oss;
    
    oss << resp->getBody().size();
    resp->addHeader("Content-Length", oss.str());
}

void mod_phpcgi::preSendRequest (apimeal::IHttpResponse *resp, apimeal::IConnexion *, apimeal::Error &){}

void mod_phpcgi::release (){}


extern "C" DLLAPIMEAL	apimeal::AModule*	LoadModule(apimeal::ILogger *log)
{
    return (new mod_phpcgi(log));
}
